function [Xval,Xsym,fval,z_sorted,neq]=MinimConstrainOM(B_ampl, z, d_ampl, Iterpar,Wi)
% This is without equilibrium
% B and d should be numeric
[neq,~]=size(B_ampl);

%% choice of different algorithm
options=optimset('fmincon');
% options=optimset(options,'Algorithm','active-set', 'Maxiter',1000,'maxfunevals',5e4);
% options=optimset(options,'Algorithm','interior-point', 'Maxiter',1000,'maxfunevals',5e4);
options=optimset(options,'Algorithm','sqp', 'Maxiter',2e3,'maxfunevals',2e5);

% this may induce error
% options=optimset(options,'GradConstr','on','GradObj','on', 'HessFcn',@(X,lambda) hessinterior(X,lambda));

options=optimset(options, 'tolcon',1e-8,'TolX',1e-8,'TolFun', 1e-9);
% options=optimset(options, 'tolcon',1e-6,'TolX',1e-4,'TolFun', 1e-9);
options=optimset(options,'Display',Iterpar);
% options=optimset(options,'UseParallel',true);


[mat_1,mat_2,mat_3,B_amplsorted,z_sorted,...
	nF0,ndouble,nsingle,...
	varsingle,vardouble,varF0]=IdentifVar(B_ampl,z);
% NewSingleVar is added here
% it is generated by uncoupling, but it is not participated in the equilibrium

%% parameter for optimization
nunknown=nF0+ndouble+nsingle;

%% initial value
initial=[zeros(neq,1);ones(nunknown,1)];

%% parameter for optimization
% Inequality
A=[];b=[]; % A x <= b
% Equality
% Residue          old z                   single unknowns
Aeq=[-eye(neq), B_amplsorted, zeros(neq,nunknown-size(B_amplsorted,2))];
beq=d_ampl; % Aeq x = beq

% no bound
lb=[-inf*ones(1,neq) -100*ones(1,nunknown)];
ub=[inf*ones(1,neq) 100*ones(1,nunknown)];
[Xval,fval] =fmincon(@(X) objfun(X(1:neq),Wi),initial,A,b,Aeq,beq,lb,ub,@nonlcon,options);

Xsym=cell(nunknown,1);Xsym(1:nF0)=varF0 ;Xsym(nF0+1:nF0+ndouble)=vardouble;Xsym(nF0+ndouble+1:end)=varsingle;
Xval(1:neq)=[];

function y=objfun(X,Wi)
y= sum((Wi.*(X) .^2));
end


%% Definition of the constraint
	function [c,ceq]=nonlcon(X)
		c=[];% global Aeq beq
		ceq=[(mat_1*X)-(mat_2*X).*(mat_3*X)];%This equation is equal to zero
	end
end
